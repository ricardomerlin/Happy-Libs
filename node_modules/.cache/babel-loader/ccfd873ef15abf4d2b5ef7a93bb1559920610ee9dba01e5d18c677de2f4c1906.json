{"ast":null,"code":"var _jsxFileName = \"/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdjectiveForm({\n  getStories\n}) {\n  _s();\n  const [singularNoun, setSingularNoun] = useState('');\n  const [pluralNoun, setPluralNoun] = useState('');\n  const [pastTenseVerb, setPastTenseVerb] = useState('');\n  const [adjective1, setAdjective1] = useState('');\n  const [adjective2, setAdjective2] = useState('');\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    fetch('http://127.0.0.1:5555/stories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"singular_noun\": singularNoun,\n        \"plural_noun\": pluralNoun,\n        \"past_tense_verb\": pastTenseVerb,\n        \"adjective1\": adjective1,\n        \"adjective2\": adjective2\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      getStories();\n      return response.json();\n    }).catch(e => console.log('There was an error: ', e));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionnaire-container fixed-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '2vw',\n        marginTop: '2v'\n      },\n      children: \"Fill out the form below to create a random story!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"questionnaire\",\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        title: \"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\",\n        children: [\"Noun(singular)\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"input-slot\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"singular-noun-input\",\n            type: \"text\",\n            placeholder: \"answer\",\n            onChange: e => setSingularNoun(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        title: \"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\",\n        children: [\"Noun (plural):\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"input-slot\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"plural-noun-input\",\n            type: \"text\",\n            placeholder: \"answer\",\n            onChange: e => setPluralNoun(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        title: \"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\",\n        children: [\"Verb (past tense):\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"input-slot\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"past-tense-verb-input\",\n            type: \"text\",\n            placeholder: \"answer\",\n            onChange: e => setPastTenseVerb(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n        children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"input-slot\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"adjective-1-input\",\n            type: \"text\",\n            placeholder: \"answer\",\n            onChange: e => setAdjective1(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n        children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"input-slot\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"adjective-2-input\",\n            type: \"text\",\n            placeholder: \"answer\",\n            onChange: e => setAdjective2(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(AdjectiveForm, \"lvd5VHdW3TGV+LU9HNnfi5LK6r0=\");\n_c = AdjectiveForm;\nexport default AdjectiveForm;\nvar _c;\n$RefreshReg$(_c, \"AdjectiveForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdjectiveForm","getStories","_s","singularNoun","setSingularNoun","pluralNoun","setPluralNoun","pastTenseVerb","setPastTenseVerb","adjective1","setAdjective1","adjective2","setAdjective2","handleFormSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","json","catch","console","log","className","children","style","fontSize","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","title","type","placeholder","onChange","target","value","_c","$RefreshReg$"],"sources":["/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nfunction AdjectiveForm({ getStories }) {\n\n    const [singularNoun, setSingularNoun] = useState('');\n    const [pluralNoun, setPluralNoun] = useState('');\n    const [pastTenseVerb, setPastTenseVerb] = useState('');\n    const [adjective1, setAdjective1] = useState('');\n    const [adjective2, setAdjective2] = useState('');\n\n    \n    function handleFormSubmit(e) {\n        e.preventDefault();\n        fetch('http://127.0.0.1:5555/stories', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"singular_noun\": singularNoun,\n            \"plural_noun\": pluralNoun,\n            \"past_tense_verb\": pastTenseVerb,\n            \"adjective1\": adjective1,\n            \"adjective2\": adjective2\n        })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            getStories();\n            return response.json();\n        })\n        .catch(e => console.log('There was an error: ', e));\n    }\n\n    return (\n        <div className='questionnaire-container fixed-form'>\n            <h4 style={{fontSize:'2vw', marginTop:'2v'}}>Fill out the form below to create a random story!</h4>\n            <form id=\"questionnaire\" onSubmit={handleFormSubmit}>\n                <li title=\"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\">Noun(singular)\n                    <p className='input-slot'>\n                        <input id=\"singular-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setSingularNoun(e.target.value)}/>\n                    </p>\n                </li>\n                <li title=\"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\">Noun (plural):\n                    <p className='input-slot'>\n                        <input id=\"plural-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPluralNoun(e.target.value)}/>\n                    </p>\n                </li>\n                <li title=\"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\">Verb (past tense):\n                    <p className='input-slot'>\n                        <input id=\"past-tense-verb-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPastTenseVerb(e.target.value)}/>\n                    </p>\n                </li>\n                <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                    <p className='input-slot'>\n                        <input id=\"adjective-1-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective1(e.target.value)}/>\n                    </p>\n                </li>\n                <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                    <p className='input-slot'>\n                        <input id=\"adjective-2-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective2(e.target.value)}/>\n                    </p>\n                </li>\n                <p>\n                    <button>Submit</button>\n                </p>\n            </form>\n        </div>\n    );\n}\n\nexport default AdjectiveForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}