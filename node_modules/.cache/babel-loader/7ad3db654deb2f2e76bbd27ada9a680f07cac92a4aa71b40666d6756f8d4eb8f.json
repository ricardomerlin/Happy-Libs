{"ast":null,"code":"var _jsxFileName = \"/Users/ricardomerlin/coding-projects/HappyLibs/src/components/AdjectiveForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdjectiveForm({\n  getStories,\n  defaultStories\n}) {\n  _s();\n  const [singularNoun, setSingularNoun] = useState('');\n  const [pluralNoun, setPluralNoun] = useState('');\n  const [pastTenseVerb, setPastTenseVerb] = useState('');\n  const [adjective1, setAdjective1] = useState('');\n  const [adjective2, setAdjective2] = useState('');\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    if (!singularNoun || !pluralNoun || !pastTenseVerb || !adjective1 || !adjective2) {\n      alert('All fields must be filled out!');\n      return;\n    }\n    let randomNumber = Math.floor(Math.random() * defaultStories.length);\n    let randomStory = defaultStories[randomNumber];\n    let filledStory = randomStory.content.replace('${singular_noun}', singularNoun).replace('${plural_noun}', pluralNoun).replace('${past_tense_verb}', pastTenseVerb).replace('${adjective1}', adjective1).replace('${adjective2}', adjective2);\n    fetch('http://localhost:3000/custom_stories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"story\": filledStory,\n        \"likes\": 0\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      getStories();\n      return response.json();\n    }).catch(e => console.log('There was an error: ', e));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '2vw',\n        marginTop: '2vh'\n      },\n      children: \"Fill out the form below to create a random story!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-container\",\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          title: \"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\",\n          children: [\"Noun(singular)\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"input-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"singular-noun-input\",\n              type: \"text\",\n              placeholder: \"answer\",\n              onChange: e => setSingularNoun(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          title: \"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\",\n          children: [\"Noun (plural):\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"input-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"plural-noun-input\",\n              type: \"text\",\n              placeholder: \"answer\",\n              onChange: e => setPluralNoun(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          title: \"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\",\n          children: [\"Verb (past tense):\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"input-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"past-tense-verb-input\",\n              type: \"text\",\n              placeholder: \"answer\",\n              onChange: e => setPastTenseVerb(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n          children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"input-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"adjective-1-input\",\n              type: \"text\",\n              placeholder: \"answer\",\n              onChange: e => setAdjective1(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n          children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"input-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"adjective-2-input\",\n              type: \"text\",\n              placeholder: \"answer\",\n              onChange: e => setAdjective2(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-form-button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(AdjectiveForm, \"lvd5VHdW3TGV+LU9HNnfi5LK6r0=\");\n_c = AdjectiveForm;\nexport default AdjectiveForm;\nvar _c;\n$RefreshReg$(_c, \"AdjectiveForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdjectiveForm","getStories","defaultStories","_s","singularNoun","setSingularNoun","pluralNoun","setPluralNoun","pastTenseVerb","setPastTenseVerb","adjective1","setAdjective1","adjective2","setAdjective2","handleFormSubmit","e","preventDefault","alert","randomNumber","Math","floor","random","length","randomStory","filledStory","content","replace","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","json","catch","console","log","children","style","fontSize","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","title","id","type","placeholder","onChange","target","value","_c","$RefreshReg$"],"sources":["/Users/ricardomerlin/coding-projects/HappyLibs/src/components/AdjectiveForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction AdjectiveForm({ getStories, defaultStories }) {\n\n    const [singularNoun, setSingularNoun] = useState('');\n    const [pluralNoun, setPluralNoun] = useState('');\n    const [pastTenseVerb, setPastTenseVerb] = useState('');\n    const [adjective1, setAdjective1] = useState('');\n    const [adjective2, setAdjective2] = useState('');\n\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        if (!singularNoun || !pluralNoun || !pastTenseVerb || !adjective1 || !adjective2) {\n            alert('All fields must be filled out!');\n            return;\n        }\n        let randomNumber = Math.floor(Math.random() * defaultStories.length);\n        let randomStory = defaultStories[randomNumber];\n        let filledStory = randomStory.content\n            .replace('${singular_noun}', singularNoun)\n            .replace('${plural_noun}', pluralNoun)\n            .replace('${past_tense_verb}', pastTenseVerb)\n            .replace('${adjective1}', adjective1)\n            .replace('${adjective2}', adjective2);\n    \n        fetch('http://localhost:3000/custom_stories', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"story\": filledStory,\n                \"likes\": 0\n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            getStories();\n            return response.json();\n        })\n        .catch(e => console.log('There was an error: ', e));\n    }\n\n    return (\n        <div>\n            <h4 style={{fontSize:'2vw', marginTop:'2vh'}}>Fill out the form below to create a random story!</h4>\n            <form className='input-container' onSubmit={handleFormSubmit}>\n                <div className=\"input-list\">\n                    <li title=\"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\">Noun(singular)\n                        <p className='input-slot'>\n                            <input id=\"singular-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setSingularNoun(e.target.value)}/>\n                        </p>\n                    </li>\n                    <li title=\"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\">Noun (plural):\n                        <p className='input-slot'>\n                            <input id=\"plural-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPluralNoun(e.target.value)}/>\n                        </p>\n                    </li>\n                    <li title=\"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\">Verb (past tense):\n                        <p className='input-slot'>\n                            <input id=\"past-tense-verb-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPastTenseVerb(e.target.value)}/>\n                        </p>\n                    </li>\n                    <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                        <p className='input-slot'>\n                            <input id=\"adjective-1-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective1(e.target.value)}/>\n                        </p>\n                    </li>\n                    <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                        <p className='input-slot'>\n                            <input id=\"adjective-2-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective2(e.target.value)}/>\n                        </p>\n                    </li>\n                </div>\n                <p>\n                    <button className='submit-form-button'>Submit</button>\n                </p>\n            </form>\n        </div>\n    );\n}\n\nexport default AdjectiveForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}