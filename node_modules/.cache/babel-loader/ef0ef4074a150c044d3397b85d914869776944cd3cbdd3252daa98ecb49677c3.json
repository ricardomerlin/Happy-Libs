{"ast":null,"code":"var _jsxFileName = \"/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdjectiveForm({\n  getStories,\n  defaultStories\n}) {\n  _s();\n  const [singularNoun, setSingularNoun] = useState('');\n  const [pluralNoun, setPluralNoun] = useState('');\n  const [pastTenseVerb, setPastTenseVerb] = useState('');\n  const [adjective1, setAdjective1] = useState('');\n  const [adjective2, setAdjective2] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    if (!singularNoun || !pluralNoun || !pastTenseVerb || !adjective1 || !adjective2) {\n      setErrorMessage('All fields must be filled out!');\n      return;\n    }\n    setErrorMessage('');\n    let randomNumber = Math.floor(Math.random() * defaultStories.length);\n    let randomStory = defaultStories[randomNumber];\n    let filledStory = randomStory.content.replace('${singular_noun}', singularNoun).replace('${plural_noun}', pluralNoun).replace('${past_tense_verb}', pastTenseVerb).replace('${adjective1}', adjective1).replace('${adjective2}', adjective2);\n    fetch('http://localhost:3000/custom_stories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"story\": filledStory,\n        \"likes\": 0\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      getStories();\n      return response.json();\n    }).catch(e => console.log('There was an error: ', e));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        fontSize: '2vw',\n        marginTop: '2vh'\n      },\n      children: \"Fill out the form below to create a random story!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-container\",\n      onSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(AdjectiveForm, \"kixI4AX/eWNFzjERu59b/uZIAF8=\");\n_c = AdjectiveForm;\nexport default AdjectiveForm;\nvar _c;\n$RefreshReg$(_c, \"AdjectiveForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdjectiveForm","getStories","defaultStories","_s","singularNoun","setSingularNoun","pluralNoun","setPluralNoun","pastTenseVerb","setPastTenseVerb","adjective1","setAdjective1","adjective2","setAdjective2","errorMessage","setErrorMessage","handleFormSubmit","e","preventDefault","randomNumber","Math","floor","random","length","randomStory","filledStory","content","replace","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","json","catch","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","marginTop","onSubmit","_c","$RefreshReg$"],"sources":["/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction AdjectiveForm({ getStories, defaultStories }) {\n\n    const [singularNoun, setSingularNoun] = useState('');\n    const [pluralNoun, setPluralNoun] = useState('');\n    const [pastTenseVerb, setPastTenseVerb] = useState('');\n    const [adjective1, setAdjective1] = useState('');\n    const [adjective2, setAdjective2] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        if (!singularNoun || !pluralNoun || !pastTenseVerb || !adjective1 || !adjective2) {\n            setErrorMessage('All fields must be filled out!');\n            return;\n        }\n        setErrorMessage('');\n        let randomNumber = Math.floor(Math.random() * defaultStories.length);\n        let randomStory = defaultStories[randomNumber];\n        let filledStory = randomStory.content\n            .replace('${singular_noun}', singularNoun)\n            .replace('${plural_noun}', pluralNoun)\n            .replace('${past_tense_verb}', pastTenseVerb)\n            .replace('${adjective1}', adjective1)\n            .replace('${adjective2}', adjective2);\n    \n        fetch('http://localhost:3000/custom_stories', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"story\": filledStory,\n                \"likes\": 0\n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            getStories();\n            return response.json();\n        })\n        .catch(e => console.log('There was an error: ', e));\n    }\n\n    return (\n        <div>\n            {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n            <h4 style={{fontSize:'2vw', marginTop:'2vh'}}>Fill out the form below to create a random story!</h4>\n            <form className='input-container' onSubmit={handleFormSubmit}>\n                {/* ...rest of the form... */}\n            </form>\n        </div>\n    );\n}\n\nexport default AdjectiveForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}