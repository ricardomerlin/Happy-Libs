{"ast":null,"code":"var _jsxFileName = \"/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdjectiveForm({\n  getData\n}) {\n  _s();\n  const [singularNoun, setSingularNoun] = useState('');\n  const [pluralNoun, setPluralNoun] = useState('');\n  const [pastTenseVerb, setPastTenseVerb] = useState('');\n  const [adjective1, setAdjective1] = useState('');\n  const [adjective2, setAdjective2] = useState('');\n\n  // function handleFormSubmit(e) {\n  //     e.preventDefault();\n  //     fetch('http://127.0.0.1:5555/default_stories', {\n  //     method: 'POST',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({\n  //         \"singular_noun\": singularNoun,\n  //         \"plural_noun\": pluralNoun,\n  //         \"past_tense_verb\": pastTenseVerb,\n  //         \"adjective1\": adjective1,\n  //         \"adjective2\": adjective2\n  //     })\n  //     })\n  //     getData()\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"questionnaire\",\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      title: \"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\",\n      children: [\"Noun(singular)\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"singular-noun-input\",\n          type: \"text\",\n          placeholder: \"answer\",\n          onChange: e => setSingularNoun(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      title: \"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\",\n      children: [\"Noun (plural):\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"plural-noun-input\",\n          type: \"text\",\n          placeholder: \"answer\",\n          onChange: e => setPluralNoun(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      title: \"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\",\n      children: [\"Verb (past tense):\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"past-tense-verb-input\",\n          type: \"text\",\n          placeholder: \"answer\",\n          onChange: e => setPastTenseVerb(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n      children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"adjective-1-input\",\n          type: \"text\",\n          placeholder: \"answer\",\n          onChange: e => setAdjective1(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      title: \"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\",\n      children: [\"Adjective:\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"adjective-2-input\",\n          type: \"text\",\n          placeholder: \"answer\",\n          onChange: e => setAdjective2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(AdjectiveForm, \"lvd5VHdW3TGV+LU9HNnfi5LK6r0=\");\n_c = AdjectiveForm;\nexport default AdjectiveForm;\nvar _c;\n$RefreshReg$(_c, \"AdjectiveForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdjectiveForm","getData","_s","singularNoun","setSingularNoun","pluralNoun","setPluralNoun","pastTenseVerb","setPastTenseVerb","adjective1","setAdjective1","adjective2","setAdjective2","id","children","title","type","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/AdjectiveForm.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nfunction AdjectiveForm({ getData }) {\n\n    const [singularNoun, setSingularNoun] = useState('');\n    const [pluralNoun, setPluralNoun] = useState('');\n    const [pastTenseVerb, setPastTenseVerb] = useState('');\n    const [adjective1, setAdjective1] = useState('');\n    const [adjective2, setAdjective2] = useState('');\n\n    \n    // function handleFormSubmit(e) {\n    //     e.preventDefault();\n    //     fetch('http://127.0.0.1:5555/default_stories', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     body: JSON.stringify({\n    //         \"singular_noun\": singularNoun,\n    //         \"plural_noun\": pluralNoun,\n    //         \"past_tense_verb\": pastTenseVerb,\n    //         \"adjective1\": adjective1,\n    //         \"adjective2\": adjective2\n    //     })\n    //     })\n    //     getData()\n    // }\n\n    return (\n        <form id=\"questionnaire\">\n            <li title=\"A singular noun refers to only one person, place, or thing. Some examples include a cat, an idea, a fruit - just make sure to only have 1!\">Noun(singular)\n                <p>\n                    <input id=\"singular-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setSingularNoun(e.target.value)}/>\n                </p>\n            </li>\n            <li title=\"A plural noun refers to more than one person, place, or thing. Examples include 'cats', 'ideas', 'fruits'.\">Noun (plural):\n                <p>\n                    <input id=\"plural-noun-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPluralNoun(e.target.value)}/>\n                </p>\n            </li>\n            <li title=\"A past tense verb is a verb that indicates an action, event, or condition that occurred in the past. For example, 'ran', 'saw', 'was'.\">Verb (past tense):\n                <p>\n                    <input id=\"past-tense-verb-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setPastTenseVerb(e.target.value)}/>\n                </p>\n            </li>\n            <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                <p>\n                    <input id=\"adjective-1-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective1(e.target.value)}/>\n                </p>\n            </li>\n            <li title=\"An adjective is a word that describes or modifies a noun. It can describe qualities such as size, color, feeling, and more. Examples include 'happy', 'blue', 'large'.\">Adjective:\n                <p>\n                    <input id=\"adjective-2-input\" type=\"text\" placeholder=\"answer\" onChange={(e) => setAdjective2(e.target.value)}/>\n                </p>\n            </li>\n            <p>\n                <button>Submit</button>\n            </p>\n        </form>\n    );\n}\n\nexport default AdjectiveForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}