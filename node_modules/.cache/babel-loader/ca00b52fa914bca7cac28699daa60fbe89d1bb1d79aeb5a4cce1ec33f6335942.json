{"ast":null,"code":"var _jsxFileName = \"/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts({\n  stories,\n  getStories\n}) {\n  _s();\n  const [storyMemes, setStoryMemes] = useState([]);\n  const [memeLinks, setMemeLinks] = useState([]);\n  const [likedPosts, setLikedPosts] = useState({});\n  useEffect(() => {\n    const newStoryMemes = stories.map(() => memeLinks[Math.floor(Math.random() * memeLinks.length)].link);\n    setStoryMemes(newStoryMemes);\n  }, [stories, memeLinks]);\n  useEffect(() => {\n    fetch('http://localhost:3000/memes').then(response => response.json()).then(data => setMemeLinks(data));\n  }, []);\n  function handleLike(storyId) {\n    console.log('Like button clicked for story with id:', storyId);\n    fetch(`http://localhost:3000/custom_stories/${storyId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"likes\": stories.find(story => story.id === storyId).likes + 1\n      })\n    }).then(() => getStories());\n    setLikedPosts(prevLikedPosts => ({\n      ...prevLikedPosts,\n      [storyId]: true\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-container\",\n    children: [stories.map((story, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"individual-card\",\n      style: {\n        backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: story.story\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD805\\uDDCA \\uD805\\uDDCA \\uD805\\uDDCA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), story.likes === 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [story.likes, \" Like\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [story.likes, \" Likes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 72\n      }, this), likedPosts[story.id] ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Post Liked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 45\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"like-button\",\n        onClick: () => handleLike(story.id),\n        children: \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 66\n      }, this)]\n    }, story.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)), stories.map((story, index) => index % 5 === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card individual-card text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: storyMemes[index],\n        alt: \"Meme\",\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, story.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(Posts, \"1WuFz2RWHlYo9Di8TGzPcAenpUE=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Posts","stories","getStories","_s","storyMemes","setStoryMemes","memeLinks","setMemeLinks","likedPosts","setLikedPosts","newStoryMemes","map","Math","floor","random","length","link","fetch","then","response","json","data","handleLike","storyId","console","log","method","headers","body","JSON","stringify","find","story","id","likes","prevLikedPosts","className","children","index","style","backgroundColor","toString","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","width","_c","$RefreshReg$"],"sources":["/Users/ricardomerlin/coding-projects/HappyLibs/frontend/src/components/Posts.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction Posts({ stories, getStories }) {\n    const [storyMemes, setStoryMemes] = useState([]);\n    const [memeLinks, setMemeLinks] = useState([]);\n    const [likedPosts, setLikedPosts] = useState({});\n\n    useEffect(() => {\n        const newStoryMemes = stories.map(() => memeLinks[Math.floor(Math.random() * memeLinks.length)].link);\n        setStoryMemes(newStoryMemes);\n    }, [stories, memeLinks]);\n\n    useEffect(() => {\n        fetch('http://localhost:3000/memes')\n            .then(response => response.json())\n            .then(data => setMemeLinks(data));\n    }, []);\n\n    function handleLike(storyId) {\n        console.log('Like button clicked for story with id:', storyId);\n        fetch(`http://localhost:3000/custom_stories/${storyId}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"likes\": stories.find(story => story.id === storyId).likes + 1\n            })\n        })\n        .then(() => getStories());\n        \n        setLikedPosts(prevLikedPosts => ({\n            ...prevLikedPosts,\n            [storyId]: true\n        }));\n    }\n    return (\n        <div className=\"posts-container\">\n            {stories.map((story, index) => (\n                <div className='individual-card' style={{ backgroundColor: `#${Math.floor(Math.random()*16777215).toString(16)}` }} key={story.id}>\n                    <p><strong>{story.story}</strong></p>\n                    <p>ð‘—Š ð‘—Š ð‘—Š</p>\n                    {(story.likes === 1) ? <p>{story.likes} Like</p> : <p>{story.likes} Likes</p>}\n                    {likedPosts[story.id] ? <p>Post Liked!</p> : <button className=\"like-button\" onClick={() => handleLike(story.id)}>Like</button>}\n                </div>\n            ))}\n            {stories.map((story, index) => index % 5 === 4 && (\n                <div className='card individual-card text-center' key={story.id}>\n                    <img src={storyMemes[index]} alt=\"Meme\" style={{ width: '100%' }} />\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Posts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}